/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usb_device.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//#include "usbd_cdc_if.h"
#include "l3gd20.h"
#include "lsm303agr.h"

/* Kalman filter parameters */
#define GYRO_VAR 0.01f
#define ACCEL_VAR 0.1f
#define GYRO_NOISE_VARIANCE 0.001f // You can adjust this value as needed

/* Gyro Kalman filter state */
static float gyro_angle_x;
static float gyro_angle_y;
static float kalman_gyro_angle_x;
static float kalman_gyro_angle_y;

/* Accelerometer Kalman filter state */
static float accel_angle_x;
static float accel_angle_y;
static float accel_angle_z;
static float kalman_accel_angle_x;
static float kalman_accel_angle_y;
static float kalman_accel_angle_z;

/* Declare gyro noise variance */
static float gyro_noise_variance = GYRO_NOISE_VARIANCE;

/* Kalman filter update equations for gyro */
void Gyro_Kalman_Filter(float gyro_data_x, float gyro_data_y) {
    float dt = 0.001f; // Assuming a fixed time interval for simplicity

    /* Predict */
    gyro_angle_x += gyro_data_x * dt;
    gyro_angle_y += gyro_data_y * dt;

    /* Update */
    float gyro_var = GYRO_VAR;
    float kalman_gain_x = gyro_var / (gyro_var + gyro_noise_variance); // Kalman gain
    float kalman_gain_y = gyro_var / (gyro_var + gyro_noise_variance); // Kalman gain

    float innovation_x = gyro_data_x - gyro_angle_x; // Innovation
    float innovation_y = gyro_data_y - gyro_angle_y; // Innovation

    gyro_angle_x += kalman_gain_x * innovation_x; // Corrected state estimate
    gyro_angle_y += kalman_gain_y * innovation_y; // Corrected state estimate

    /* Kalman filtered gyro */
    kalman_gyro_angle_x = gyro_angle_x;
    kalman_gyro_angle_y = gyro_angle_y;
}


/* Kalman filter update equations for accelerometer */
void Accel_Kalman_Filter(float accel_data_x, float accel_data_y, float accel_data_z) {
    float dt = 0.001f; // Assuming a fixed time interval for simplicity

    /* Predict */
    accel_angle_x += accel_data_x * dt;
    accel_angle_y += accel_data_y * dt;
    accel_angle_z += accel_data_z * dt;

    /* Update */
    float accel_var = ACCEL_VAR;
    accel_angle_x += accel_var * dt; // Update with accelerometer noise
    accel_angle_y += accel_var * dt;
    accel_angle_z += accel_var * dt;

    /* Kalman filtered accelerometer */
    kalman_accel_angle_x = accel_angle_x;
    kalman_accel_angle_y = accel_angle_y;
    kalman_accel_angle_z = accel_angle_z;
}

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* I2C variables */
__IO uint32_t     Xfer_Direction = 0;
__IO uint32_t     Xfer_Complete = 0;
// Buffer used for transmission
uint8_t aTxBuffer[4];
// Buffer used for reception
uint8_t aRxBuffer[2];

/* Gyroscope variables */
uint8_t spi_Buffer[6];
float float_Buffer[3];
// ID of L3GD20
uint8_t ui8gyroID;
// test buffer
uint8_t testBuf[1];
// new gyro data available
__IO uint8_t new_gyro_data = 0;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define COUNTOF(__BUFFER__)   (sizeof(__BUFFER__) / sizeof(*(__BUFFER__)))
/* Size of Transmission buffer */
#define TXBUFFERSIZE                      (COUNTOF(aTxBuffer))
/* Size of Reception buffer */
#define RXBUFFERSIZE                      (COUNTOF(aRxBuffer))

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
//static const uint8_t MAGSENS_ADDR = 0x1e<<1;
static const uint8_t ACCENS_ADDR = 0x19<<1;
uint8_t USBstr[80] = {0};
uint8_t USBstr_lenth = 0;
// receive buffer for USB
uint8_t usb_rx_data[80];
uint32_t usb_rx_len = 0;
uint8_t usb_flag = 0x00; // whether or not new data is received.

// pulsewidth in ns - for the motor
uint32_t pulsewidth_ns1 = 0;
uint32_t pulsewidth_ns2 = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void set_led(uint8_t counter);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  int16_t buffer[3] = {0};
  float Xval;
  float Yval;
  float YawVal;
  int acc_x;
  int acc_y;
  int acc_z;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //The following code initializes the receive and transmit buffers being used.
  aRxBuffer[0]=0x00;
  aRxBuffer[1]=0x00;

  aTxBuffer[0]=0x00;
  aTxBuffer[1]=0xcd;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_USB_DEVICE_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  sprintf((char *)USBstr, "I'm working!! :D");

  CDC_Transmit_FS((uint8_t*)USBstr, sizeof(USBstr));
  // Initialize the gyro driver
  GYRO_Init();
  ui8gyroID = L3GD20_ReadID();
  GYRO_IO_Read(testBuf, L3GD20_CTRL_REG3_ADDR, sizeof(testBuf));

  // Initialize spi buffer
  L3GD20_ReadXYZAngRate_Raw(spi_Buffer);

  /* Enable the Listen mode with Interrupts for the I2C:
   * The Listen Mode will wait for an I2C Event to occur
   * and will be treated in the Interrupt Service Routine of the I2C. */
//  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
//  {
//	  /* Transfer error in reception process */
//	  Error_Handler();
//  }

  HAL_StatusTypeDef ret;
  uint8_t buf=0x00;
  uint8_t who_am_i_addr = 0x0F;
  ret = HAL_I2C_Mem_Read(&hi2c1, ACCENS_ADDR, who_am_i_addr, I2C_MEMADD_SIZE_8BIT, &buf, 1, HAL_MAX_DELAY);
  if (ret != HAL_OK ) {
	  Error_Handler();
  }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_Delay(1);
      BSP_ACCELERO_GetXYZ(buffer);

      if (usb_flag == 1)
      {
          switch (usb_rx_data[0])
          {
          case 0x01:
              pulsewidth_ns1 = usb_rx_data[4] |
                               (usb_rx_data[3] << 8) |
                               (usb_rx_data[2] << 16) |
                               (usb_rx_data[1] << 24);
              htim2.Instance->CCR1 = pulsewidth_ns1;
              USBstr_lenth = sprintf((char *)USBstr, "motor 1 set to: %d \n\r", (int)pulsewidth_ns1);
              CDC_Transmit_FS((uint8_t*)USBstr, USBstr_lenth);
              break;
          case 0x02:
              pulsewidth_ns2 = usb_rx_data[4] |
                               (usb_rx_data[3] << 8) |
                               (usb_rx_data[2] << 16) |
                               (usb_rx_data[1] << 24);
              htim2.Instance->CCR2 = pulsewidth_ns2;
              USBstr_lenth = sprintf((char *)USBstr, "motor 2 set to: %d \n\r", (int)pulsewidth_ns2);
              CDC_Transmit_FS((uint8_t*)USBstr, USBstr_lenth);
              break;
          case 105:
              USBstr_lenth = sprintf((char *)USBstr, "Naughty ;) \n\r");
              CDC_Transmit_FS((uint8_t*)USBstr, USBstr_lenth);
              break;
          case 0x03:
              Xval = float_Buffer[0];
              Yval = float_Buffer[1];
              YawVal = float_Buffer[2];
              acc_x = buffer[0];
              acc_y = buffer[1];
              acc_z = buffer[2];
              sprintf((char *)USBstr, " %f,%f,%f,%d,%d,%d,%f,%f,%f,%f,%f\r\n",
                      float_Buffer[0], float_Buffer[1], float_Buffer[2],
                      buffer[0], buffer[1], buffer[2],
                      kalman_accel_angle_x, kalman_accel_angle_y, kalman_accel_angle_z,
                      kalman_gyro_angle_x, kalman_gyro_angle_y);
              CDC_Transmit_FS((uint8_t *)USBstr, sizeof(USBstr));
              break;
          default:
              USBstr_lenth = sprintf((char *)USBstr, "command %d not supported :'( \n\r", usb_rx_data[0]);
              CDC_Transmit_FS((uint8_t *)USBstr, USBstr_lenth);
              // do nothing
              break;
          }

          usb_flag = 0;
      }

      // if new data from the gyro update the Xval and Yval
      if(new_gyro_data == 0x01)
      {
          //L3GD20_ReadXYZAngRate_Raw(spi_Buffer);
          L3GD20_ReadXYZAngRate(float_Buffer);
          Gyro_Kalman_Filter(float_Buffer[0], float_Buffer[1]);
          new_gyro_data = 0x00; // Reset flag
      }

      // Apply Kalman filter to accelerometer data
      Accel_Kalman_Filter(buffer[0], buffer[1], buffer[2]);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */


/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

  if(GPIO_Pin == GYRO_INT2_Pin)
  {
    //HAL_GPIO_TogglePin(LD10_GPIO_Port,LD10_Pin);
    new_gyro_data = 0x01;

  }
  else
  {
    __NOP();
  }
}

//// callback function to reset the I2C if time-out occurred
//void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
//    if (htim == &htim1){
//        // reset timer
//        HAL_TIM_Base_Stop_IT(&htim1);
//        Xfer_Complete = 1;
//
//    }
//}

/**
  * @brief  Set BSP LEDs.
  * @param  uint_8: counter - which LED should be switched on.
  * @note   This is a simple helper function to turn on a single LED, it requires a number to select an LED,
  *         starting at 0 with the LED in the upper left corner, and ending with 7 with the LED in the lower
  *         right corner.
  */
void set_led(uint8_t counter)
{
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_SET);

  switch(counter)
  {
  case 0:
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
    break;
  case 1:
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
    break;
  case 2:
    HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
    break;
  case 3:
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
    break;
  case 4:
    HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
    break;
  case 5:
    HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
    break;
  case 6:
    HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_RESET);
    break;
  case 7:
    HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
    break;
  }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
