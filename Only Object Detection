#!/usr/bin/env python

import rospy
import cv2
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class ImageProcessor:
    def __init__(self):
        self.image_pub = rospy.Publisher("image_detected", Image, queue_size=1)
        self.bridge = CvBridge()
        self.image_sub = rospy.Subscriber("/csi_cam_0/image_raw", Image, self.callback)
        self.face_cascade = cv2.CascadeClassifier('/home/hal9000/catkin_ws/src/opencv_pipelines/src/haarcascade_frontalface_default.xml')

    def callback(self, data):
        try:
            # Convert ROS Image message to OpenCV image
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            rospy.logerr(e)
            return

        # Convert BGR image to grayscale for face detection
        gray_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)

        # Perform face detection
        faces = self.face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        # Draw rectangles around detected faces
        for (x, y, w, h) in faces:
            cv2.rectangle(cv_image, (x, y), (x + w, y + h), (255, 0, 0), 2)

        try:
            # Convert annotated image back to ROS Image message and publish
            processed_image_msg = self.bridge.cv2_to_imgmsg(cv_image, "bgr8")
            self.image_pub.publish(processed_image_msg)
        except CvBridgeError as e:
            rospy.logerr(e)

def main():
    rospy.init_node('image_processor', anonymous=True)
    image_processor = ImageProcessor()
    rospy.loginfo("Face detection node running...")
    try:
        rospy.spin()
    except KeyboardInterrupt:
        rospy.loginfo("Shutting down")

if __name__ == '__main__':
    main()
